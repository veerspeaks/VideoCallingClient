'use client';

import React, { useRef, useEffect } from 'react';
import io from 'socket.io-client';


const SOCKET_SERVER_URL = process.env.NEXT_PUBLIC_SOCKET_SERVER_URL || 'http://localhost:4000';
const VideoCall = () => {
  // Refs to store video elements and connections
  const localVideoRef = useRef(null);
  const remoteVideoRef = useRef(null);
  const peerConnectionRef = useRef(null);
  const socketRef = useRef(null);

  useEffect(() => {
    // Initialize Socket.io connection to the server
    socketRef.current = io(SOCKET_SERVER_URL);

    // Request access to the user's camera and microphone
    navigator.mediaDevices.getUserMedia({ video: true, audio: true })
      .then((stream) => {
        // Display the local video stream in the local video element
        localVideoRef.current.srcObject = stream;

        // Create a new RTCPeerConnection for WebRTC
        const peerConnection = new RTCPeerConnection({
          iceServers: [
            { urls: 'stun:stun.l.google.com:19302' }, // Use Google's public STUN server
          ],
        });

        // Add local stream tracks to the peer connection
        stream.getTracks().forEach((track) => peerConnection.addTrack(track, stream));

        // Handle incoming remote stream and display it in the remote video element
        peerConnection.ontrack = (event) => {
          remoteVideoRef.current.srcObject = event.streams[0];
        };

        // Handle ICE candidates generated by the peer connection
        peerConnection.onicecandidate = (event) => {
          if (event.candidate) {
            console.log('Sending ICE candidate:', event.candidate);
            // Send the ICE candidate to the other peer via the signaling server
            socketRef.current.emit('signal', { candidate: event.candidate });
          }
        };

        // Handle signals received from the other peer
        socketRef.current.on('signal', async (data) => {
          console.log('Received signal:', data);
          try {
            if (data.description) {
              // Check if the connection is ready to handle an offer
              const readyForOffer = peerConnection.signalingState === 'stable' || peerConnection.signalingState === 'have-local-offer';
              const offerCollision = data.description.type === 'offer' && !readyForOffer;

              if (offerCollision) {
                console.log('Offer collision detected');
                return;
              }

              // Set the remote description received from the other peer
              await peerConnection.setRemoteDescription(data.description);
              if (data.description.type === 'offer') {
                // If the description is an offer, create an answer
                const answer = await peerConnection.createAnswer();
                await peerConnection.setLocalDescription(answer);
                // Send the answer back to the other peer
                socketRef.current.emit('signal', { description: peerConnection.localDescription });
              }
            } else if (data.candidate) {
              // Add the received ICE candidate to the peer connection
              await peerConnection.addIceCandidate(data.candidate);
            }
          } catch (error) {
            console.error('Error handling signal:', error);
          }
        });

        // Create and send an offer to the other peer
        const createOffer = async () => {
          const offer = await peerConnection.createOffer();
          await peerConnection.setLocalDescription(offer);
          // Send the offer to the other peer via the signaling server
          socketRef.current.emit('signal', { description: peerConnection.localDescription });
        };

        createOffer();

        // Save the peer connection to the ref for later use
        peerConnectionRef.current = peerConnection;
      })
      .catch((error) => console.error('Error accessing media devices.', error));

    return () => {
      // Clean up on component unmount
      if (peerConnectionRef.current) {
        peerConnectionRef.current.close();
      }
      if (socketRef.current) {
        socketRef.current.disconnect();
      }
    };
  }, []);

  return (
    <div>
      <h1>Video Call</h1>
      <div style={{ display: 'flex', justifyContent: 'space-around' }}>
        <video
          ref={localVideoRef}
          autoPlay
          playsInline
          muted
          style={{ width: '45%', border: '1px solid black' }}
        />
        <video
          ref={remoteVideoRef}
          autoPlay
          playsInline
          style={{ width: '45%', border: '1px solid black' }}
        />
      </div>
    </div>
  );
};

export default VideoCall;