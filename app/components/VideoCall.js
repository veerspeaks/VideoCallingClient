'use client';

import React, { useRef, useEffect, useState } from 'react';
import io from 'socket.io-client';
import { MicrophoneIcon, VideoCameraIcon, PhoneIcon } from '@heroicons/react/24/solid';
import { MicrophoneIcon as MicMutedIcon, VideoCameraIcon as VideoOffIcon } from '@heroicons/react/24/outline';

const SOCKET_SERVER_URL = process.env.NEXT_PUBLIC_SOCKET_SERVER_URL || 'http://localhost:4000';

const VideoCall = () => {
  const [isAudioMuted, setIsAudioMuted] = useState(false);
  const [isVideoOff, setIsVideoOff] = useState(false);
  
  // Refs to store video elements and connections
  const localVideoRef = useRef(null);
  const remoteVideoRef = useRef(null);
  const peerConnectionRef = useRef(null);
  const socketRef = useRef(null);

  // Add new function to handle media controls
  const toggleAudio = () => {
    const stream = localVideoRef.current.srcObject;
    stream.getAudioTracks().forEach(track => {
      track.enabled = !track.enabled;
    });
    setIsAudioMuted(!isAudioMuted);
  };

  const toggleVideo = () => {
    const stream = localVideoRef.current.srcObject;
    stream.getVideoTracks().forEach(track => {
      track.enabled = !track.enabled;
    });
    setIsVideoOff(!isVideoOff);
  };

  const endCall = () => {
    if (peerConnectionRef.current) {
      peerConnectionRef.current.close();
    }
    if (socketRef.current) {
      socketRef.current.disconnect();
    }
    // You might want to add navigation logic here
  };

  useEffect(() => {
    // Initialize Socket.io connection to the server
    socketRef.current = io(SOCKET_SERVER_URL);

    // Request access to the user's camera and microphone
    navigator.mediaDevices.getUserMedia({ video: true, audio: true })
      .then((stream) => {
        // Display the local video stream in the local video element
        localVideoRef.current.srcObject = stream;

        // Create a new RTCPeerConnection for WebRTC
        const peerConnection = new RTCPeerConnection({
          iceServers: [
            { urls: 'stun:stun.l.google.com:19302' }, // Use Google's public STUN server
          ],
        });

        // Add local stream tracks to the peer connection
        stream.getTracks().forEach((track) => peerConnection.addTrack(track, stream));

        // Handle incoming remote stream and display it in the remote video element
        peerConnection.ontrack = (event) => {
          remoteVideoRef.current.srcObject = event.streams[0];
        };

        // Handle ICE candidates generated by the peer connection
        peerConnection.onicecandidate = (event) => {
          if (event.candidate) {
            console.log('Sending ICE candidate:', event.candidate);
            // Send the ICE candidate to the other peer via the signaling server
            socketRef.current.emit('signal', { candidate: event.candidate });
          }
        };

        // Handle signals received from the other peer
        socketRef.current.on('signal', async (data) => {
          console.log('Received signal:', data);
          try {
            if (data.description) {
              // Check if the connection is ready to handle an offer
              const readyForOffer = peerConnection.signalingState === 'stable' || peerConnection.signalingState === 'have-local-offer';
              const offerCollision = data.description.type === 'offer' && !readyForOffer;

              if (offerCollision) {
                console.log('Offer collision detected');
                return;
              }

              // Set the remote description received from the other peer
              await peerConnection.setRemoteDescription(data.description);
              if (data.description.type === 'offer') {
                // If the description is an offer, create an answer
                const answer = await peerConnection.createAnswer();
                await peerConnection.setLocalDescription(answer);
                // Send the answer back to the other peer
                socketRef.current.emit('signal', { description: peerConnection.localDescription });
              }
            } else if (data.candidate) {
              // Add the received ICE candidate to the peer connection
              await peerConnection.addIceCandidate(data.candidate);
            }
          } catch (error) {
            console.error('Error handling signal:', error);
          }
        });

        // Create and send an offer to the other peer
        const createOffer = async () => {
          const offer = await peerConnection.createOffer();
          await peerConnection.setLocalDescription(offer);
          // Send the offer to the other peer via the signaling server
          socketRef.current.emit('signal', { description: peerConnection.localDescription });
        };

        createOffer();

        // Save the peer connection to the ref for later use
        peerConnectionRef.current = peerConnection;
      })
      .catch((error) => console.error('Error accessing media devices.', error));

    return () => {
      // Clean up on component unmount
      if (peerConnectionRef.current) {
        peerConnectionRef.current.close();
      }
      if (socketRef.current) {
        socketRef.current.disconnect();
      }
    };
  }, []);

  return (
    <div className="h-screen bg-gray-900">
      <div className="h-full max-w-7xl mx-auto">
        <div className="relative h-full md:aspect-video bg-gray-800 overflow-hidden shadow-2xl">
          {/* Remote Video (Full Screen) */}
          <video
            ref={remoteVideoRef}
            autoPlay
            playsInline
            className="absolute inset-0 w-full h-full object-cover"
          />
          
          {/* Local Video (Picture-in-Picture) */}
          <div className="absolute top-4 right-4 w-28 md:w-1/4 aspect-video z-10">
            <video
              ref={localVideoRef}
              autoPlay
              playsInline
              muted
              className="w-full h-full object-cover rounded-lg border-2 border-white/20 shadow-lg"
            />
          </div>

          {/* Controls Overlay */}
          <div className="absolute bottom-0 left-0 right-0 p-4 md:p-6 bg-gradient-to-t from-black/80 to-transparent">
            <div className="flex items-center justify-center gap-4 md:gap-6">
              {/* Audio Control */}
              <button
                onClick={toggleAudio}
                className={`p-3 md:p-4 rounded-full ${
                  isAudioMuted ? 'bg-red-500' : 'bg-white'
                } hover:opacity-90 transition-all`}
              >
                {isAudioMuted ? (
                  <MicMutedIcon className="w-5 h-5 md:w-6 md:h-6 text-white" />
                ) : (
                  <MicrophoneIcon className="w-5 h-5 md:w-6 md:h-6 text-gray-900" />
                )}
              </button>

              {/* End Call */}
              <button
                onClick={endCall}
                className="p-3 md:p-4 rounded-full bg-red-500 hover:bg-red-600 transition-all"
              >
                <PhoneIcon className="w-5 h-5 md:w-6 md:h-6 text-white rotate-[135deg]" />
              </button>

              {/* Video Control */}
              <button
                onClick={toggleVideo}
                className={`p-3 md:p-4 rounded-full ${
                  isVideoOff ? 'bg-red-500' : 'bg-white'
                } hover:opacity-90 transition-all`}
              >
                {isVideoOff ? (
                  <VideoOffIcon className="w-5 h-5 md:w-6 md:h-6 text-white" />
                ) : (
                  <VideoCameraIcon className="w-5 h-5 md:w-6 md:h-6 text-gray-900" />
                )}
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VideoCall;